# ===================================================================
# LinkedIn Post Generator - Core Dependencies
# This file is optimized for a lean and functional Streamlit app.
# Last updated: 2025-07-06
# ===================================================================

# ----- CORE FRAMEWORK -----
# The web application framework
streamlit==1.31.0

# ----- LLM APIs -----
# For connecting to Large Language Models
anthropic==0.18.1
openai==1.12.0
google-generativeai==0.8.2

# ----- CONTENT EXTRACTION -----
# For scraping web pages and processing files
beautifulsoup4==4.12.3
requests==2.31.0
lxml==5.1.0                  # A faster parser for BeautifulSoup
PyPDF2==3.0.1                # For reading PDF files
validators==0.22.0           # For simple and reliable URL validation

# ----- LINKEDIN INTEGRATION -----
# The unofficial API client for posting to LinkedIn
linkedin-api==2.1.1

# ----- DATABASE -----
# The Object-Relational Mapper (ORM) for the SQLite database
sqlalchemy==2.0.25

# ----- DATA & UTILITIES -----
# For loading environment variables from .env file
python-dotenv==1.0.1
# For advanced date and time manipulation, especially timezones
pytz==2024.1
# For data manipulation and creating DataFrames for display
pandas==2.2.0

# ----- PLOTTING & ANALYTICS -----
# For creating the analytics charts on the History page
plotly==5.18.0

# ----- SCHEDULING (optional, for background tasks) -----
# Lightweight task scheduling if running a separate scheduler script
schedule==1.2.0


# ===================================================================
# PACKAGES REMOVED FOR SIMPLICITY
# ===================================================================
# The following packages were removed to keep the project lean.
# Their functionality is either non-essential or can be handled
# by Streamlit's built-in features or standard Python libraries.
#
# - streamlit-tags, streamlit-calendar: UI can be handled with native Streamlit widgets.
# - rich, tqdm: Primarily for command-line interface (CLI) applications.
# - loguru: Standard `logging` module is sufficient.
# - pydantic: Great for validation, but an extra layer for this project's needs.
# - aiohttp: `requests` is simpler for the current synchronous logic.
# - ftfy, unidecode: Advanced text cleaning, not essential.
# - bcrypt: For password hashing, which is not used.
# - diskcache: Streamlit's built-in caching (@st.cache_data) is preferred.
#

# ===================================================================
# DEVELOPMENT & TESTING (Optional)
# ===================================================================
# These are only needed if you are running automated tests.
# You can uncomment them if you set up a testing workflow.
#
# pytest==7.4.4
# pytest-asyncio==0.23.3
# pytest-cov==4.1.0